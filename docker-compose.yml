version: "3"

services: 

  #   /\     /\        /\        /\        /\        /\     /\
  #  /--\___/--\__/\__/--\__/\__/--\__/\__/--\__/\__/--\___/--\
  # /-<>-\---<>---|| <---->      UIs     <----> ||---<>---/-<>-\
  # \----/..\--/..\/..\--/---\-\----/-/---\--/..\/..\--/..\----/
  #  \--/----\/--------\/-----\-\--/-/-----\/--------\/----\--/
  #   \/                       \-\/-/                       \/
  # 

    react-ui:
      image: react-ui
      build:
        context: ./react-ui
        dockerfile: Dockerfile
      container_name: react-ui
      ports: 
        - "3000:3000"
      environment:
        - REACT_APP_API_URL=http://localhost:9000
      depends_on:
        - zuul-api
      networks:
        - backend

  #   /\     /\        /\        /\        /\        /\     /\
  #  /--\___/--\__/\__/--\__/\__/--\__/\__/--\__/\__/--\___/--\
  # /-<>-\---<>---|| <---->   DATABASES  <----> ||---<>---/-<>-\
  # \----/..\--/..\/..\--/---\-\----/-/---\--/..\/..\--/..\----/
  #  \--/----\/--------\/-----\-\--/-/-----\/--------\/----\--/
  #   \/                       \-\/-/                       \/
  #                             \/\/

    #### EMPLOYEE DATABASE ####
    employee-db:
      image: mysql:latest #
      restart: on-failure #
      container_name: employee_db
      environment: #
        MYSQL_DATABASE: employee_db
        MYSQL_USER: user
        MYSQL_PASSWORD: password
        MYSQL_ROOT_PASSWORD: root
        MYSQL_TCP_PORT: 3306
        SQL_INTERNAL_PORT: 3306
      ports: #
        - "3306:3306"
      volumes: 
        - employee_db:/var/lib/mysql 
      networks:
        - backend
    #### LOGIN DATABASE ####
    login-db:
      image: mysql:latest #
      restart: on-failure #
      container_name: login_db
      environment: #
        MYSQL_DATABASE: login_db
        MYSQL_USER: user
        MYSQL_PASSWORD: password
        MYSQL_ROOT_PASSWORD: root
        MYSQL_TCP_PORT: 3307
        SQL_INTERNAL_PORT: 3307
      ports: #
        - "3307:3307"
      volumes: 
        - login_db:/var/lib/mysql 
      networks:
        - backend
    #### REGISTRATION DATABASE ####
    registration-db:
      image: mysql:latest
      restart: on-failure
      container_name: registration_db
      environment: #
        MYSQL_DATABASE: registration_db
        MYSQL_USER: user
        MYSQL_PASSWORD: password
        MYSQL_ROOT_PASSWORD: root
        MYSQL_TCP_PORT: 3308
        SQL_INTERNAL_PORT: 3308
      ports: #
        - "3308:3308"
      volumes: 
        - registration_db:/var/lib/mysql 
      networks:
        - backend
  
  #   /\     /\        /\        /\        /\        /\     /\
  #  /--\___/--\__/\__/--\__/\__/--\__/\__/--\__/\__/--\___/--\
  # /-<>-\---<>---|| <---->   SERVICES   <----> ||---<>---/-<>-\
  # \----/..\--/..\/..\--/...\-\----/-/...\--/..\/..\--/..\----/
  #  \--/----\/--------\/-----\-\--/-/-----\/--------\/----\--/
  #   \/                       \-\/-/                       \/
  #                             \/\/
  
    #### EMPLOYEE SERVICE ####
    employee-service:
      image: employee-service
      build:
        context: ./employee-service
        dockerfile: Dockerfile
      restart: on-failure
      container_name: employee_service
      environment:
        - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
        - spring.datasource.url=jdbc:mysql://employee-db:3306/employee_db
        - eureka.instance.hostname=login-service
        - spring.datasource.username=user
        - spring.datasource.password=password
      depends_on: 
        - employee-db
        - discovery-service
        - zuul-api
      ports:
        - "8080:8080"
      networks:
        - backend
    #### LOGIN SERVICE ####
    login-service:
      image: login-service
      build:
        context: ./login-service
        dockerfile: Dockerfile
      restart: on-failure
      container_name: login_service
      environment:
        - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
        - spring.datasource.url=jdbc:mysql://login-db:3307/login_db
        - spring.datasource.username=root
        - spring.datasource.password=root
      depends_on: 
        - login-db
        # - discovery-service
      ports:
        - "8081:8081"
      networks:
        - backend
    #### DISCOVERY SERVICE ####
    discovery-service:
      image: discovery-service
      build:
        context: ./discovery-service
        dockerfile: Dockerfile
      restart: on-failure
      container_name: discovery_service
      environment:
        - eureka.client.service-url.defaultZone=http://discovery-service:8761/eureka/
        - eureka.client.fetch-registry=false
        - eureka.client.register-with-eureka=false
      ports:
        - "8761:8761"
      networks:
        - backend
    #### REGISTRATION SERVICE ####
    registration-service:
      image: registration-service
      build:
        context: ./registration-service
        dockerfile: Dockerfile
      restart: on-failure
      container_name: registration_service
      environment:
        - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
        - spring.datasource.url=jdbc:mysql://registration-db:3308/registration_db
        - spring.datasource.username=user
        - spring.datasource.password=password
        - spring.kafka.consumer.bootstrap-servers=http://kafka:9092
        - spring.kafka.producer.bootstrap-servers=http://kafka:9092
        - listeners=PLAINTEXT://kafka:9092
      depends_on: 
        - registration-db
        - kafka
      ports:
        - "10000:10000"
      networks:
        - backend

  #   /\     /\        /\        /\        /\        /\     /\
  #  /--\___/--\__/\__/--\__/\__/--\__/\__/--\__/\__/--\___/--\
  # /-<>-\---<>---|| <---->     APIs     <----> ||---<>---/-<>-\
  # \----/..\--/..\/..\--/...\-\----/-/...\--/..\/..\--/..\----/
  #  \--/----\/--------\/-----\-\--/-/-----\/--------\/----\--/
  #   \/                       \-\/-/                       \/
  #                             \/\/

    #### ZUUL API ####
    zuul-api:
      image: zuul-api
      build:
        context: ./api-gateway
        dockerfile: Dockerfile
      restart: on-failure
      container_name: zuul_api
      environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
      - zuul.routes.employee-service.url=http://employee-service:8080
      - zuul.routes.login-service.url=http://login-service:8081
      ports:
        - "9000:9000"
      networks:
        - backend
    #### ZOOKEEPER ####
    zookeeper:
      image: zookeeper
      container_name: zookeeper
      restart: always
      networks:
        - backend
      ports:
        - "2181:2181"
      volumes:
        - /tmp/docker/zk1/logs:/logs
        - /tmp/docker/zk1/data:/data
    #### KAFKA ####
    kafka:
      image: wurstmeister/kafka
      container_name: kafka
      restart: always
      networks:
        - backend
      ports:
        - "9092:9092"
      volumes:
          - /tmp/docker/kafka1/logs:/logs
          - /tmp/docker/kafka1/data:/data
      environment:
        # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
        # KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
        # KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
        # KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
        KAFKA_ADVERTISED_HOST_NAME: kafka
        KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
        KAFKA_BROKER_ID: 1
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_CREATE_TOPICS: "registration:1:1"
      depends_on:
        - zookeeper
          #### KAFKA NOTES ####
          # -* Attach Shell to Terminal (VsCode)
          # -* replication-factor will be 1 since we will only have 1 topic 
          # -* Build Topic: 
          #       kafka-topics.sh --bootstrap-server localhost:9092 --create --topic <NAME-OF-TOPIC> --partitions 1 --replication-factor 1
          # -* List Topic:
          #       kafka-topics.sh --bootstrap-server localhost:9092 --list
          # -* Alter Topic:
          #       kafka-topics.sh --bootstrap-server localhost:9092 --alter --topic <NAME-OF-TOPIC> --partions <INT NUMBER>
          # -* Describe Topic:
          #       kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic <NAME-OF-TOPIC>
          # -* View Consumer Console of Topic:
          #       kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic <NAME-OF-TOPIC> --offset earliest --partition 0
          # -* Delete Topic (optional):
          #       kafka-topics.sh --bootstrap-server localhost:9092 --delete --topic <NAME-OF-TOPIC>



volumes:
  employee_db:
  login_db:
  registration_db:
  zookeeper:

networks:
  backend: